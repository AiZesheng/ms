项目 1：拼多多商家 app 广告投放 H5
1、项目开发体验极差
项目过于庞大，每次启动以及改代码之后的本地编译都很慢，生产环境构建也很慢，要30分钟以上

2、项目代码难以维护 
(1)、这个项目我接手的时候是个老项目，技术栈由react15升react16，由于没有使用状态管理，导致代码混乱
(2)、埋点及灰度方案非常复杂，代码侵入太强加上业务逻辑复杂导致代码难以维护，重构困难

3、页面性能差
由于是spa项目，同加上首页的接口逻辑复杂，导致首屏渲染时间过长，多达两秒
代码写的有问题，没有用useMemo、useCallback

解决方法
针对项目庞大以及代码不好维护的问题，我们拆分子项目，使用next脚手架，在新项目里重构老代码，当时拆分了3个子项目，一个是广告管理流程、账户模块、广告活动模块
针对首屏渲染慢的问题 使用服务端渲染 同时推后端同学整合首页接口

遇到的痛点
(1)、重构代码在上线前需要测试，排测试资源是个问题，因为当时测试资源紧张，只有3个同学
(2)、推后端同学整合接口
(3)、业务逻辑复杂，有些业务逻辑在老代码里看不懂，不明白为啥这么做，需要找到当时对应的产品
(4)、重构代码不一定能得到产品的支持，需要提前沟通，要有对应的业务产品跟踪

最好的重构节奏：跟着产品需求走，哪个模块有需求就重构哪个模块的代码，跟测试说要把该模块功能全部回归一遍


项目 2：商业化前端组件库项目
为什么要做，因为商业化广告部有自己的一套设计体系，与antd的组件风格有较大差别，直接覆盖antd的主题是远远不够的
需求痛点，做组件库这个事件得不到产品支持，产品只关心业务，而且业务部门的开发全是做业务的，没有专门做技术的，技术类需求只能是抽时间做。公司高层的态度是，技术类的需求你可以做，但是你不能影响到业务的迭代速度
需要得到设计部的支持，帮忙设计组件库官网。
技术痛点：组件库官网希望能够直接调试组件代码，最开始考虑参考antd使用codesandbox，这里遇到的问题是公司内部的组件库npm包不能开源，而且codesandbox需要翻墙。最后经过调研，使用react-live这个库


项目 3：Temu 拉新活动页
技术难点：
(1)、国际化方案改造
最开始的方案是把文案json配置到本地，有几国语言就配置几份文件，但是后来随着国家越开越多，开发的维护成本就越来越高，后来改了方案
(2)、动画极其复杂，各种动效五花八门，复杂动画用lottie，调试需要按帧调试
(3)、需要为项目接入性能监控，包括白屏、卡顿等指标的采集和上报
白屏：FP = Date.now() - performence.timing.navigationStart
卡顿：通过Long Tasks API方案获取duration 
new一个PerfomanceObserver实例 entryTypes传longtask, 在回调里拿到entries里面的duration，如果这个时间超过100毫秒就上报卡顿
var observer = new PerformanceObserver(function (list) {
  var perfEntries = list.getEntries();
  for (const entry of perfEntries) {
    // 分析和上报关键卡顿信息
    if (entry.duration > 100) {
    	console.log('页面卡顿超过100ms')
    }
  }
});
// 注册长任务的观察
observer.observe({ entryTypes: ["longtask"] });

项目4：Temu 客服工作台
技术难点：
(1)、微前端项目拆分，使用qiankun，运行时的publicPath和构建时的publicPath
(2)、重构vue重构成react17
(3)、国际化方案改造，包括文案兼容和rtl









