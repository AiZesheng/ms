动态规划：在求解子问题时，会保存该子问题的解，后面的子问题求解时，可以直接拿来计算。

例子1：斐波那契数列
var climbStairs = function(n) {
  let p = 0
  let q = 0
  let r = 1
  for (let i=0;i<n;i++) {
    p = q
    q = r
    r = p+q
  }
  return r
};

例子2：买股票的最佳时机
输入：[7,1,5,3,6,4]
输出：5
解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
var maxProfit = function (prices) {
    let min = prices[0]
    let result = 0
    for (let i = 0; i < prices.length; i++) {
        min = Math.min(min, prices[i])
        result = Math.max(result, prices[i] - min) 
    }
    return result
};


个人理解，通过循环来记住之前的结果

// 最大子数组和
// 输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
// 输出：6
// 解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。
var maxSubArray = function(nums) {
  let result = nums[0]
  let pre = 0
  for (let i=0;i<nums.length;i++) {
    pre = Math.max(pre + nums[i], nums[i])
    result = Math.max(result, pre)
  }
  return result
};

maxSubArray([-2,1,-3,4,-1,2,1,-5,4])

// 跳跃游戏
// 输入：nums = [2,3,1,1,4]
// 输出：true
// 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
// 输入：nums = [3,2,1,0,4]
// 输出：false
// 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。
var canJump = function(nums) {
  let last = nums.length - 1
  for (let i=nums.length - 2; i>=0; i--) {
    if (i + nums[i] >= last) {
      last = i
    }
  }
  return last === 0
};

// 输入：prices = [7,1,5,3,6,4]
// 输出：7
// 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。
// 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3。
// 最大总利润为 4 + 3 = 7 。
// 思路 只要第二天的股价比第一天的股价高就把这两天的差加上，最后就可以得出最大利润
var maxProfit = function(prices) {
  let res = 0
  for (let i=1; i<prices.length; i++) {
    res += Math.max(0, prices[i] - prices[i - 1])
  }
  return res
};
maxProfit([7,1,5,3,6,4])