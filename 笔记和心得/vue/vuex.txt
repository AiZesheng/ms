1. state: 存一些全局数据
  辅助函数： mapState   
	computed: mapState([
		'count'
	])
	如果不用mapState 想直接调用state里面的数据就这样写： this.$store.state.num
2. Mutations: 存一些全局的函数
	辅助函数： mapMutations
	methods: {
    ...mapMutations([
      'increment' // 映射 this.increment() 为 this.$store.commit('increment')
    ])
  }
  如果不用辅助函数就这样写 this.$store.commit('add', 10)   // 后面的是传的参数

3. getters: 对state的数据进行过滤
const store = new Vuex.Store({
  state: {
    todos: [
      { id: 1, text: '...', done: true },
      { id: 2, text: '...', done: false }
    ]
  },
  getters: {
    doneTodos: state => {
      return state.todos.filter(todo => todo.done)
    }
  }
})
直接调用： this.$store.getters.doneTodosCount
辅助函数： mapGetters
computed: {
	...mapGetters([
	  'doneTodosCount',
	  'anotherGetter',
	  // ...
	])
}
4. actions   类似于mutation，区别是：
  (1).Action 提交的是 mutation，而不是直接变更状态。
  (2).Action 可以包含任意异步操作，而mutation的函数必须是同步的
const store = new Vuex.Store({
  state: {
    count: 0
  },
  mutations: {
    increment (state) {
      state.count++
    }
  },
  actions: {
    increment (context) {
      context.commit('increment')
    }
  }
})
直接调用： store.dispatch('increment')
辅助函数： mapActions
methods: {
  ...mapActions([
    'increment' // 映射 this.increment() 为 this.$store.dispatch('increment')
  ])
}
5.modules: 将store分块
const moduleA = {
  state: { ... },
  mutations: { ... },
  actions: { ... },
  getters: { ... }
}

const moduleB = {
  state: { ... },
  mutations: { ... },
  actions: { ... }
}

const store = new Vuex.Store({
  modules: {
    a: moduleA,
    b: moduleB
  }
})

store.state.a // -> moduleA 的状态
store.state.b // -> moduleB 的状态








