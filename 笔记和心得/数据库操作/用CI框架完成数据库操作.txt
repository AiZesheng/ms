CI框架使用方法：
1.先在view里建一个a.php 正常写html
2.在controller里建一个a.php 复制welcome.php里的代码 把类名改成A 把$this->load->view('welcome_message')改成$this->load->view('a');
3.打开Navicat 建表  在database里面有一个'database' => '',这个双引号里写数据库名
4.在models下建一个php文件，文件名为 表名_model.php 然后复制下面的代码
<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class 表名_model extends CI_Model {
	public function get_by_username_password($username,$password){
		$query = $this->db->get_where("user",array("username"=>$username,"password"=>$password));
		return $query->row();
	}
}
get_where第一个参数是表名，不是数据库名
对数据库的查询操作(get_where)：
(在controller中的a.php里写)public function go(){
		//1.从页面接收数据
		$username = $this->input->post("username");
		$password = $this->input->post("password");
		//2.链接数据库
		$this->load->model("user_model");
		$row = $this->user_model->get_by_username_password($username,$password);
		//3.跳转
		if($row){
			echo "正确";
		}else{
			$this->index();
		}
	}
查询多条数据(get):
models里写
class User_model extends CI_Model {
	public function get_all(){
		return $this->db->get("表名")->result();
	}
}
controllers里写
public function index(){
		$this->load->model("user_model");
		$result = $this->user_model->get_all();
		$data = array(
			"user" => $result
		);
		$this->load->view('hello',$data);
	}
view里写
<?php  
	foreach($user as $aa){
?>
	<tr>
		<td><?php echo $aa->realname ?></td>
		<td><?php echo $aa->sex ?></td>
		<td><?php echo $aa->money ?></td>
	</tr>
<?php } ?>

多表查询：
public function get_all(){
			$this->db->select("blog.*,catalog.name as CATALOG_NAME");
			$this->db->from("t_blogs blog"); // blog是别名
			$this->db->join("t_blog_catalogs catalog","blog.catalog_id=catalog.catalog_id");// catalog 是别名
			$this->db->order_by("blog.add_time","desc");
			$query = $this->db->get();
			return $query->result();
		}
用sql语句进行多表查询：
public function get_comment($blog_id){
			$query = $this->db->query("select * from t_comments,t_users where t_comments.COMMENTATOR=t_users.USER_ID and t_comments.BLOG_ID='$blog_id'");
			return $query->result();
		}
注意：只要是返回的result 在页面输出时就得用foreach 

对数据库的增操作(insert):
在  表名_model.php里继续写
public function save($data){
		$this->db->insert("user_message",$data);
		if($this->db->affected_rows()>0){
			return TRUE;
		}
		return FALSE;
	}
上面的"user_message"是表名，$data是个数组,下面有定义
在controller下面的a.php里面定义一个save方法
public function save()
	{
		$username = $this->input->post("username");
		$password = $this->input->post("password");
		$password2 = $this->input->post("password2");

		$data = array(
			"username" => $username,
			"password" => $password,
		);
		if($password != $password2){
			echo "两次输入的密码不一致";
		}
		else{
			$this->load->model("user_model");
			$result = $this->user_model->save($data);
			if($result){
				echo "注册成功";
			}
			else{
				echo "注册失败";
			}
		}
	}

改：
$data = array(
	"money"=>$now_money
);
$this->db->where("username",$username);
$bool = $this->db->update("user_message",$data);
if($bool){
	$this->load->view("main");
}

session:
$this->session->set_userdata("login_user",$row);
<p class="now">当前用户：
	<?php
		$login_user = $this->session->userdata("login_user");
		if($login_user){
			echo "$login_user->username";
		}else{
			echo "当前没有用户";
		}
	?>
</p>
清空session:
$this->session->unset_userdata("login_user");

重定向：redirect("first");


想把查到的数据显示到页面上：
控制器里写
// $username和$password是已经查到的数据
$data["user"] = $username;
$data["pass"] = $password;
$this->load->view("main",$data);
view里写
用户名：<?php echo $user;?>
密码：<?php echo $pass;?>