ssr注水
服务端渲染：在服务端注入数据，构建出组件树
序列化成 HTML：脱水成人干
客户端渲染：到达客户端后泡水，激活水流，变回活人

ssr同构
所谓同构，通俗的讲，就是一套React代码在服务器上运行一遍，到达浏览器又运行一遍。服务端渲染完成页面结构，客户端渲染绑定事件。

ReactDOMServer.renderToString(element)
将React元素渲染为初始HTML。React将返回一个HTML字符串。你可以使用此方法在服务端生成HTML，
并在首次请求时将标记下发，以加快页面加载速度，并允许搜索引擎爬取你的页面以达到SEO优化的目的。

为什么服务端加载了一次，客户端还需要再次加载呢？
原因很简单，服务端使用renderToString渲染页面，而react-dom/server下的renderToString并没有做事件相关的处理，
因此返回给浏览器的内容不会有事件绑定，渲染出来的页面只是一个静态的HTML页面。
只有在客户端渲染React组件并初始化React实例后，才能更新组件的state和props，
初始化React的事件系统，让React组件真正“ 动” 起来。

什么是SSG
Static Site Generation一种在构建时生成静态html技术，开发者需编写一些模板文件和数据文件，通过构建工具将这些文件渲染成静态html文件。
SSG只适合那些迭代不频繁的项目，如果是迭代频繁的项目，开发者可能需要不停地改模板。

为什么ssr有利于seo
因为ssr生成的html是服务端直出的，这使得搜索引擎爬虫可以直接读取和索引页面内容，无需执行js


服务端渲染的降级策略
基于next9写了一个框架，该框架可实现打包生成两份代码，一份用于ssr一份用于csr。并且支持本地直接访问csr。
服务器nginx配置如果ssr是500，就把流量打到csr
